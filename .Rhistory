labs(title = "Success Rate by Left and Right Contrasts for all sessions", x = "Left Contrast", y = "Right Contrast", fill = "Success Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# loops through sessions to add average spikes for each trial to our session data
for (i in 1:n.session) {
n.trials = length(session[[i]]$feedback_type)
avg_spikes_all = numeric(n.trials)
# loops through each trial finding average neural spikes
for (j in 1:n.trials) {
spks.trial = session[[i]]$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
# Stores average neural spikes for every trial in a given session together
session[[i]]$avg_spks = avg_spikes_all
}
trials_all = tibble()
# loops through all sessions to combine data
for (i in 1:n.session) {
curr = session[[i]]
n.trials = length(curr$feedback_type)
# creates a tibble of chosen variables for the current session
trials = tibble(
mouse_name = rep(curr$mouse_name, n.trials),
avg_spks = curr$avg_spks,
contrast_left = curr$contrast_left,
contrast_right = curr$contrast_right,
abs_contrast_diff = abs(curr$contrast_right - curr$contrast_left),
feedback_type = curr$feedback_type,
session_ID = rep(i, n.trials),
combined = (curr$avg_spks * abs(curr$contrast_right - curr$contrast_left))
)
# combines all data across sessions together
trials_all = bind_rows(trials_all, trials)
}
set.seed(123)
# creates training and test data
train_index <- sample(1:nrow(trials_all), 0.8 * nrow(trials_all))
train_data <- trials_all[train_index, ]
test_data <- trials_all[-train_index, ]
# fits the logistic regression model using training data
fit.mod = glm(
as.factor(feedback_type) ~ combined + abs_contrast_diff + avg_spks + contrast_right + contrast_left + as.factor(session_ID),
data = train_data,
family = 'binomial'
)
# summarizes the model
summary(fit.mod)
# generate predicted probabilities
predicted_probs = predict(fit.mod, newdata = test_data, type = "response")
# converts probabilities to binary predictions
predicted_classes = ifelse(predicted_probs >= 0.5, 1, -1)
# creates a confusion matrix
confusion_matrix = table(Predicted = predicted_classes, Actual = test_data$feedback_type)
confusion_matrix
# calculates accuracy
accuracy = sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
# calculates ROC and area under the curve
roc_curve = roc(response = test_data$feedback_type, predictor = predicted_probs)
auc(roc_curve)
# plots ROC curve
plot(roc_curve, main = "ROC Curve", col = "blue", lwd = 2)
# loads the test sets (replace with actual paths)
test_session1 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test1.rds")
test_session18 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test2.rds")
n.trials = length(test_session1$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session1$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session1$avg_spks = avg_spikes_all
test_data_1 = tibble(
mouse_name = rep(test_session1$mouse_name, n.trials),
avg_spks = test_session1$avg_spks,
contrast_left = test_session1$contrast_left,
contrast_right = test_session1$contrast_right,
abs_contrast_diff = abs(test_session1$contrast_right - test_session1$contrast_left),
feedback_type = test_session1$feedback_type,
session_ID = rep(1, n.trials),
combined = (test_session1$avg_spks * abs(test_session1$contrast_right - test_session1$contrast_left))
)
n.trials = length(test_session18$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session18$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session18$avg_spks = avg_spikes_all
test_data_18 = tibble(
mouse_name = rep(test_session18$mouse_name, n.trials),
avg_spks = test_session18$avg_spks,
contrast_left = test_session18$contrast_left,
contrast_right = test_session18$contrast_right,
abs_contrast_diff = abs(test_session18$contrast_right - test_session18$contrast_left),
feedback_type = test_session18$feedback_type,
session_ID = rep(18, n.trials),
combined = (test_session18$avg_spks * abs(test_session18$contrast_right - test_session18$contrast_left))
)
train_data_1 <- trials_all %>%
anti_join(test_data_1, by = c("mouse_name", "contrast_left", "contrast_right", "feedback_type", "session_ID", "combined"))
train_data_18 <- anti_join(trials_all, test_data_18, by = c("mouse_name", "avg_spks", "contrast_left", "contrast_right", "abs_contrast_diff", "feedback_type", "session_ID", "combined"))
nrow(trials_all)
nrow(train_data_18)
# loads the test sets (replace with actual paths)
test_session1 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test1.rds")
test_session18 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test2.rds")
n.trials = length(test_session1$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session1$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session1$avg_spks = avg_spikes_all
test_data_1 = tibble(
mouse_name = rep(test_session1$mouse_name, n.trials),
avg_spks = test_session1$avg_spks,
contrast_left = test_session1$contrast_left,
contrast_right = test_session1$contrast_right,
abs_contrast_diff = abs(test_session1$contrast_right - test_session1$contrast_left),
feedback_type = test_session1$feedback_type,
session_ID = rep(1, n.trials),
combined = (test_session1$avg_spks * abs(test_session1$contrast_right - test_session1$contrast_left))
)
n.trials = length(test_session18$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session18$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session18$avg_spks = avg_spikes_all
test_data_18 = tibble(
mouse_name = rep(test_session18$mouse_name, n.trials),
avg_spks = test_session18$avg_spks,
contrast_left = test_session18$contrast_left,
contrast_right = test_session18$contrast_right,
abs_contrast_diff = abs(test_session18$contrast_right - test_session18$contrast_left),
feedback_type = test_session18$feedback_type,
session_ID = rep(18, n.trials),
combined = (test_session18$avg_spks * abs(test_session18$contrast_right - test_session18$contrast_left))
)
nrow(train_data_18)
train_data_1 <- trials_all %>%
anti_join(test_data_1, by = c("mouse_name", "contrast_left", "contrast_right", "feedback_type", "session_ID", "combined"))
train_data_18 <- anti_join(trials_all, test_data_18, by = c("mouse_name", "avg_spks", "contrast_left", "contrast_right", "abs_contrast_diff", "feedback_type", "session_ID", "combined"))
nrow(trials_all)
nrow(train_data_18)
# loads the test sets (replace with actual paths)
test_session1 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test1.rds")
test_session18 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test2.rds")
n.trials = length(test_session1$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session1$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session1$avg_spks = avg_spikes_all
test_data_1 = tibble(
mouse_name = rep(test_session1$mouse_name, n.trials),
avg_spks = test_session1$avg_spks,
contrast_left = test_session1$contrast_left,
contrast_right = test_session1$contrast_right,
abs_contrast_diff = abs(test_session1$contrast_right - test_session1$contrast_left),
feedback_type = test_session1$feedback_type,
session_ID = rep(1, n.trials),
combined = (test_session1$avg_spks * abs(test_session1$contrast_right - test_session1$contrast_left))
)
n.trials = length(test_session18$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session18$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session18$avg_spks = avg_spikes_all
test_data_18 = tibble(
mouse_name = rep(test_session18$mouse_name, n.trials),
avg_spks = test_session18$avg_spks,
contrast_left = test_session18$contrast_left,
contrast_right = test_session18$contrast_right,
abs_contrast_diff = abs(test_session18$contrast_right - test_session18$contrast_left),
feedback_type = test_session18$feedback_type,
session_ID = rep(18, n.trials),
combined = (test_session18$avg_spks * abs(test_session18$contrast_right - test_session18$contrast_left))
)
nrow(test_data_18)
nrow(trials_all)
train_data_1 <- trials_all %>%
anti_join(test_data_1, by = c("mouse_name", "contrast_left", "contrast_right", "feedback_type", "session_ID", "combined"))
train_data_18 <- anti_join(trials_all, test_data_18, by = c("mouse_name", "avg_spks", "contrast_left", "contrast_right", "abs_contrast_diff", "feedback_type", "session_ID", "combined"))
nrow(trials_all)
nrow(train_data_18)
# loads the test sets (replace with actual paths)
test_session1 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test1.rds")
test_session18 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test2.rds")
n.trials = length(test_session1$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session1$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session1$avg_spks = avg_spikes_all
test_data_1 = tibble(
mouse_name = rep(test_session1$mouse_name, n.trials),
avg_spks = test_session1$avg_spks,
contrast_left = test_session1$contrast_left,
contrast_right = test_session1$contrast_right,
abs_contrast_diff = abs(test_session1$contrast_right - test_session1$contrast_left),
feedback_type = test_session1$feedback_type,
session_ID = rep(1, n.trials),
combined = (test_session1$avg_spks * abs(test_session1$contrast_right - test_session1$contrast_left))
)
n.trials = length(test_session18$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session18$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session18$avg_spks = avg_spikes_all
test_data_18 = tibble(
mouse_name = rep(test_session18$mouse_name, n.trials),
avg_spks = test_session18$avg_spks,
contrast_left = test_session18$contrast_left,
contrast_right = test_session18$contrast_right,
abs_contrast_diff = abs(test_session18$contrast_right - test_session18$contrast_left),
feedback_type = test_session18$feedback_type,
session_ID = rep(18, n.trials),
combined = (test_session18$avg_spks * abs(test_session18$contrast_right - test_session18$contrast_left))
)
nrow(test_data_18)
nrow(trials_all)
train_data_1 <- trials_all %>%
anti_join(test_data_1, by = c("mouse_name", "contrast_left", "contrast_right", "feedback_type", "session_ID", "combined"))
train_data_18 <- anti_join(trials_all, test_data_18, by = c("mouse_name", "avg_spks", "contrast_left", "contrast_right", "abs_contrast_diff", "feedback_type", "session_ID", "combined"))
nrow(trials_all)
nrow(train_data_18 %in% trials_all)
# loads the test sets (replace with actual paths)
test_session1 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test1.rds")
test_session18 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test2.rds")
n.trials = length(test_session1$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session1$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session1$avg_spks = avg_spikes_all
test_data_1 = tibble(
mouse_name = rep(test_session1$mouse_name, n.trials),
avg_spks = test_session1$avg_spks,
contrast_left = test_session1$contrast_left,
contrast_right = test_session1$contrast_right,
abs_contrast_diff = abs(test_session1$contrast_right - test_session1$contrast_left),
feedback_type = test_session1$feedback_type,
session_ID = rep(1, n.trials),
combined = (test_session1$avg_spks * abs(test_session1$contrast_right - test_session1$contrast_left))
)
n.trials = length(test_session18$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session18$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session18$avg_spks = avg_spikes_all
test_data_18 = tibble(
mouse_name = rep(test_session18$mouse_name, n.trials),
avg_spks = test_session18$avg_spks,
contrast_left = test_session18$contrast_left,
contrast_right = test_session18$contrast_right,
abs_contrast_diff = abs(test_session18$contrast_right - test_session18$contrast_left),
feedback_type = test_session18$feedback_type,
session_ID = rep(18, n.trials),
combined = (test_session18$avg_spks * abs(test_session18$contrast_right - test_session18$contrast_left))
)
nrow(test_data_18)
nrow(trials_all)
train_data_1 <- trials_all %>%
anti_join(test_data_1, by = c("mouse_name", "contrast_left", "contrast_right", "feedback_type", "session_ID", "combined"))
train_data_18 <- anti_join(trials_all, test_data_18, by = c("mouse_name", "avg_spks", "contrast_left", "contrast_right", "abs_contrast_diff", "feedback_type", "session_ID", "combined"))
nrow(trials_all)
nrow(test_data_18 %in% trials_all)
print(test_data_18 %in% trials_all)
trials_all$session_ID[1]
train_data_1
trials_all$session_ID
train_data_1
trials_all %>% filter(session_ID == 1)
train_data_1
trials_all %>% filter(session_ID == 1)
test_data_1
# loads the test sets
test_session1 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test1.rds")
test_session18 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test2.rds")
# calculates variables from model created for test data in section 1
n.trials = length(test_session1$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session1$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session1$avg_spks = avg_spikes_all
test_data_1 = tibble(
mouse_name = rep(test_session1$mouse_name, n.trials),
avg_spks = test_session1$avg_spks,
contrast_left = test_session1$contrast_left,
contrast_right = test_session1$contrast_right,
abs_contrast_diff = abs(test_session1$contrast_right - test_session1$contrast_left),
feedback_type = test_session1$feedback_type,
session_ID = rep(1, n.trials),
combined = (test_session1$avg_spks * abs(test_session1$contrast_right - test_session1$contrast_left))
)
# calculates variables from model created for test data in section 1
n.trials = length(test_session18$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session18$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session18$avg_spks = avg_spikes_all
test_data_18 = tibble(
mouse_name = rep(test_session18$mouse_name, n.trials),
avg_spks = test_session18$avg_spks,
contrast_left = test_session18$contrast_left,
contrast_right = test_session18$contrast_right,
abs_contrast_diff = abs(test_session18$contrast_right - test_session18$contrast_left),
feedback_type = test_session18$feedback_type,
session_ID = rep(18, n.trials),
combined = (test_session18$avg_spks * abs(test_session18$contrast_right - test_session18$contrast_left))
)
# fits the logistic regression model using data from all trials
fit.mod.performance = glm(
as.factor(feedback_type) ~ combined + abs_contrast_diff + avg_spks + contrast_right + contrast_left + as.factor(session_ID),
data = trials_all,
family = 'binomial'
)
# summarizes the model
summary(fit.mod.1)
# evaluates the model on the test sets
test_session1_pred = predict(fit.mod.1, newdata = test_data_1, type = "response")
# evaluates the model on the test sets
test_session1_pred = predict(fit.mod.performance, newdata = test_data_1, type = "response")
test_data_1
trials_all
test_data_1
trials_all
test_data_18 = tibble(
mouse_name = rep(test_session18$mouse_name, n.trials),
avg_spks = test_session18$avg_spks,
contrast_left = test_session18$contrast_left,
contrast_right = test_session18$contrast_right,
abs_contrast_diff = abs(test_session18$contrast_right - test_session18$contrast_left),
feedback_type = test_session18$feedback_type,
session_ID = int(rep(18, n.trials)),
combined = (test_session18$avg_spks * abs(test_session18$contrast_right - test_session18$contrast_left))
)
test_data_1
trials_all
# evaluates the model on the test sets
test_session1_pred = predict(fit.mod.performance, newdata = test_data_1, type = "response")
# loads the test sets
test_session1 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test1.rds")
test_session18 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test2.rds")
# calculates variables from model created for test data in section 1
n.trials = length(test_session1$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session1$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session1$avg_spks = avg_spikes_all
test_data_1 = tibble(
mouse_name = rep(test_session1$mouse_name, n.trials),
avg_spks = test_session1$avg_spks,
contrast_left = test_session1$contrast_left,
contrast_right = test_session1$contrast_right,
abs_contrast_diff = abs(test_session1$contrast_right - test_session1$contrast_left),
feedback_type = test_session1$feedback_type,
session_ID = rep(1, n.trials),
combined = (test_session1$avg_spks * abs(test_session1$contrast_right - test_session1$contrast_left))
)
# calculates variables from model created for test data in section 1
n.trials = length(test_session18$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session18$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session18$avg_spks = avg_spikes_all
test_data_18 = tibble(
mouse_name = rep(test_session18$mouse_name, n.trials),
avg_spks = test_session18$avg_spks,
contrast_left = test_session18$contrast_left,
contrast_right = test_session18$contrast_right,
abs_contrast_diff = abs(test_session18$contrast_right - test_session18$contrast_left),
feedback_type = test_session18$feedback_type,
session_ID = as.integer(rep(18, n.trials)),
combined = (test_session18$avg_spks * abs(test_session18$contrast_right - test_session18$contrast_left))
)
# loads the test sets
test_session1 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test1.rds")
test_session18 = readRDS("C:/Users/calvin/Desktop/STA141AProject/test/test2.rds")
# calculates variables from model created for test data in section 1
n.trials = length(test_session1$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session1$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session1$avg_spks = avg_spikes_all
test_data_1 = tibble(
mouse_name = rep(test_session1$mouse_name, n.trials),
avg_spks = test_session1$avg_spks,
contrast_left = test_session1$contrast_left,
contrast_right = test_session1$contrast_right,
abs_contrast_diff = abs(test_session1$contrast_right - test_session1$contrast_left),
feedback_type = test_session1$feedback_type,
session_ID = as.integer(rep(1, n.trials)),
combined = (test_session1$avg_spks * abs(test_session1$contrast_right - test_session1$contrast_left))
)
# calculates variables from model created for test data in section 1
n.trials = length(test_session18$feedback_type)
avg_spikes_all = numeric(n.trials)
for (j in 1:n.trials) {
spks.trial = test_session18$spks[[j]]
total.spikes = apply(spks.trial, 1, sum)
avg_spikes_all[j] = mean(total.spikes)
}
test_session18$avg_spks = avg_spikes_all
test_data_18 = tibble(
mouse_name = rep(test_session18$mouse_name, n.trials),
avg_spks = test_session18$avg_spks,
contrast_left = test_session18$contrast_left,
contrast_right = test_session18$contrast_right,
abs_contrast_diff = abs(test_session18$contrast_right - test_session18$contrast_left),
feedback_type = test_session18$feedback_type,
session_ID = as.integer(rep(18, n.trials)),
combined = (test_session18$avg_spks * abs(test_session18$contrast_right - test_session18$contrast_left))
)
# fits the logistic regression model using data from all trials
fit.mod.performance = glm(
as.factor(feedback_type) ~ combined + abs_contrast_diff + avg_spks + contrast_right + contrast_left + as.factor(session_ID),
data = trials_all,
family = 'binomial'
)
# summarizes the model
summary(fit.mod.1)
test_data_1
trials_all
# evaluates the model on the test sets
test_session1_pred = predict(fit.mod.performance, newdata = test_data_1, type = "response")
test_data_1
trials_all
# evaluates the model on the test sets
test_session1_pred = predict(fit.mod.performance, newdata = test_data_1, type = "response")
test_data_1
trials_all
# evaluates the model on the test sets
test_session1_pred = predict(fit.mod.performance, newdata = test_session1 = "response")
test_data_1
trials_all
# evaluates the model on the test sets
test_session1_pred = predict(fit.mod.performance, newdata = test_session1)
test_session18_pred = predict(fit.mod.performance, newdata = test_data_18, type = "response")
# fits the logistic regression model using data from all trials
fit.mod.performance = glm(
as.factor(feedback_type) ~ avg_spks + as.factor(session_ID),
data = trials_all,
family = 'binomial'
)
# summarizes the model
summary(fit.mod.1)
test_data_1
trials_all
# evaluates the model on the test sets
test_session1_pred = predict(fit.mod.performance, newdata = test_data_1, type = "response")
test_session18_pred = predict(fit.mod.performance, newdata = test_data_18, type = "response")
# calculates performance metrics for each test set
roc_session1 = roc(response = test_session1$feedback_type, predictor = test_session1_pred)
roc_session18 = roc(response = test_session18$feedback_type, predictor = test_session18_pred)
auc_session1 = auc(roc_session1)
auc_session18 = auc(roc_session18)
cat("AUC for Session 1 Test Set:", auc_session1, "\n")
cat("AUC for Session 18 Test Set:", auc_session18, "\n")
roc_session1
test_data_1
trials_all
# evaluates the model on the test sets
test_session1_pred = predict(fit.mod.performance, newdata = test_data_1, type = "response")
test_session18_pred = predict(fit.mod.performance, newdata = test_data_18, type = "response")
# calculates performance metrics for each test set
roc_session1 = roc(response = test_session1$feedback_type, predictor = test_session1_pred)
roc_session18 = roc(response = test_session18$feedback_type, predictor = test_session18_pred)
plot(roc_session1)
plot(roc_session18)
auc_session1 = auc(roc_session1)
auc_session18 = auc(roc_session18)
cat("AUC for Session 1 Test Set:", auc_session1, "\n")
cat("AUC for Session 18 Test Set:", auc_session18, "\n")
